var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * @file index
 * @author Cuttle Cong
 * @date 2018/6/18
 * @description
 */

import * as React from 'react';
import { BadgeInner } from './Badge';
import { rStrip, proxy, getOffset, createSingleElementView, strip } from './utils';
import { wrapString } from './string-utils';
import createI18nWrapper, { RAW_DATA_SEP } from './createI18nWrapper';
import { encode, decode } from './ghost-string';
import Transaction from './Transaction';

import defaultTinyI18n from './defaultTinyI18n';

var badge = createSingleElementView();
proxy(badge, 'open', function (open) {
  return function (props, attributes, mountDom) {
    return open(React.createElement(BadgeInner, props), attributes, mountDom);
  };
});

if (module.hot) {
  //
  module.hot.accept(['.', './createI18nWrapper'], function () {
    badge.close();
  });
}

var defaultSetting = {
  enabled: false
};

export default function createReactI18nLive() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$tinyI18n = _ref.tinyI18n,
      tinyI18n = _ref$tinyI18n === undefined ? defaultTinyI18n : _ref$tinyI18n,
      transaction = _ref.transaction,
      _ref$createElement = _ref.createElement,
      createElement = _ref$createElement === undefined ? React.createElement : _ref$createElement;

  tinyI18n = _extends({}, tinyI18n);
  if (!(transaction instanceof Transaction)) {
    transaction = new Transaction(tinyI18n, transaction);
  }

  var setting = _extends({}, defaultSetting);

  var configure = function configure(config) {
    Object.assign(setting, config);
    if (!setting.enabled) {
      badge.close();
    }
  };

  var overrideTinyI18n = _extends({}, tinyI18n, {
    setLanguage: createWrappedSetLanguage(tinyI18n.setLanguage.bind(tinyI18n), { setting: setting, transaction: transaction }),
    i18n: createWrappedI18n(tinyI18n.i18n.bind(tinyI18n), {
      setting: setting
    })
  });

  return {
    transaction: transaction,
    configure: configure,
    getSetting: function getSetting() {
      return setting;
    },

    originTinyI18n: tinyI18n,
    tinyI18n: overrideTinyI18n,
    createElement: makeWrappedCreateElement(createElement, {
      originTinyI18n: tinyI18n,
      tinyI18n: overrideTinyI18n,
      transaction: transaction,
      setting: setting,
      highlight: true
    })
  };
}

// Overwrites `tinyI18n.i18n` for inject some data.
export function createWrappedI18n(i18n) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$setting = _ref2.setting,
      setting = _ref2$setting === undefined ? defaultSetting : _ref2$setting;

  return function wrappedI18n(key) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argumentArray = [].slice.call(arguments);

    if (!setting.enabled) {
      return i18n.apply(this, argumentArray);
    }
    var rawTranslated = i18n.apply(this, argumentArray);
    var hideDataString = JSON.stringify([key, args]);
    return wrapString(rawTranslated + RAW_DATA_SEP + encode(hideDataString), {});
  };
}

function makeWrappedCreateElement(createElement) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      transaction = _ref3.transaction,
      _ref3$setting = _ref3.setting,
      setting = _ref3$setting === undefined ? defaultSetting : _ref3$setting,
      originTinyI18n = _ref3.originTinyI18n,
      tinyI18n = _ref3.tinyI18n,
      _ref3$highlight = _ref3.highlight,
      highlight = _ref3$highlight === undefined ? false : _ref3$highlight;

  var I18nWrapper = createI18nWrapper({ badge: badge, originTinyI18n: originTinyI18n, highlight: highlight, transaction: transaction, createElement: createElement, tinyI18n: tinyI18n });
  return function wrappedCreateElement(type, config) {
    for (var _len2 = arguments.length, children = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      children[_key2 - 2] = arguments[_key2];
    }

    if (!setting.enabled) {
      return createElement.apply(this, [type, config].concat(children));
    }

    // html tag
    if (typeof type === 'string') {
      return I18nWrapper({ children: createElement.apply(this, [type, config].concat(children)) });
    }

    return createElement.apply(this, [type, config].concat(children));
  };
}

export function createWrappedSetLanguage(setLanguage) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$setting = _ref4.setting,
      setting = _ref4$setting === undefined ? defaultSetting : _ref4$setting,
      transaction = _ref4.transaction;

  return function wrappedSetLanguage(language) {
    if (!setting.enabled) {
      return setLanguage.apply(this, arguments);
    }
    transaction.register(language);
    return setLanguage.apply(this, arguments);
  };
}