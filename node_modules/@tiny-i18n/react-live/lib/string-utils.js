'use strict';

exports.__esModule = true;
exports.CLOSE_STR = exports.OPEN_STR = undefined;
exports.wrapString = wrapString;
exports.parseWrappedStringLinkedList = parseWrappedStringLinkedList;
exports.stripWrappedString = stripWrappedString;
exports.mergeWrappedStringLinked = mergeWrappedStringLinked;

var _yallist = require('yallist');

var _yallist2 = _interopRequireDefault(_yallist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OPEN_STR = exports.OPEN_STR = '\u206E';
var CLOSE_STR = exports.CLOSE_STR = '\u206F';

function wrapString(string) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$openStr = _ref.openStr,
      openStr = _ref$openStr === undefined ? OPEN_STR : _ref$openStr,
      _ref$closeStr = _ref.closeStr,
      closeStr = _ref$closeStr === undefined ? CLOSE_STR : _ref$closeStr;

  if (typeof string === 'string') {
    return '' + openStr + string + closeStr;
  }
  return string;
}

var getStrSize = function getStrSize(str) {
  return Array.from(str).length;
};

function parseWrappedStringLinkedList(wrappedString) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$openStr = _ref2.openStr,
      openStr = _ref2$openStr === undefined ? OPEN_STR : _ref2$openStr,
      _ref2$closeStr = _ref2.closeStr,
      closeStr = _ref2$closeStr === undefined ? CLOSE_STR : _ref2$closeStr,
      _ref2$allowEmptyConte = _ref2.allowEmptyContent,
      allowEmptyContent = _ref2$allowEmptyConte === undefined ? true : _ref2$allowEmptyConte;

  var linkedList = _yallist2.default.create();
  var createValue = function createValue(str, type) {
    return {
      content: str,
      type: type
    };
  };

  var pushTextNode = function pushTextNode(text) {
    if (!linkedList.tail || linkedList.tail.value.type !== 'text') {
      return linkedList.push(createValue(text, 'text'));
    }
    linkedList.tail.value.content += text;
  };

  var openStack = [];
  var strArray = Array.from(wrappedString);
  var openSize = getStrSize(openStr);
  var closeSize = getStrSize(closeStr);

  var i = 0;
  while (i < strArray.length) {
    var char = strArray[i];
    var str = strArray.slice(i).join('');
    if (str.startsWith(openStr)) {
      linkedList.push(createValue(openStr, 'guess-open'));
      openStack.push(linkedList.tail);
      i += openSize;
      continue;
    }

    if (str.startsWith(closeStr) && openStack.length) {
      if (allowEmptyContent || linkedList.tail.value.type === 'text' && linkedList.tail.value.content !== '') {
        var openNode = openStack.pop();
        openNode.value.type = 'open';

        linkedList.push(createValue(closeStr, 'close'));
        i += closeSize;
        continue;
      }
    }

    if (!openStack.length) {
      pushTextNode(char);
    } else {
      pushTextNode(char);
    }
    i++;
  }

  var mergeTextNode = function mergeTextNode(node) {
    if (!node || node.value.type !== 'text') {
      return;
    }
    var prev = node.prev;
    if (prev && prev.value.type === 'text') {
      prev.value.content += node.value.content;
      linkedList.removeNode(node);
      mergeTextNode(prev);
      return;
    }

    var next = node.next;
    if (next && next.value.type === 'text') {
      next.value.content = node.value.content + next.value.content;
      linkedList.removeNode(node);
      mergeTextNode(next);
    }
  };

  // guess-open -> text
  openStack.forEach(function (node) {
    node.value.type = 'text';
    mergeTextNode(node);
  });

  return linkedList;
}

function stripWrappedString(wrappedString) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$level = _ref3.level,
      level = _ref3$level === undefined ? 1 : _ref3$level,
      transform = _ref3.transform,
      allowEmptyContent = _ref3.allowEmptyContent,
      _ref3$openStr = _ref3.openStr,
      openStr = _ref3$openStr === undefined ? OPEN_STR : _ref3$openStr,
      _ref3$closeStr = _ref3.closeStr,
      closeStr = _ref3$closeStr === undefined ? CLOSE_STR : _ref3$closeStr;

  var linked = parseWrappedStringLinkedList(wrappedString, {
    openStr: openStr,
    closeStr: closeStr,
    allowEmptyContent: allowEmptyContent
  });

  var stripByLinkedNode = function stripByLinkedNode(head) {
    var string = '';
    var endNode = null;
    if (!head) {
      return {
        string: string,
        endNode: endNode
      };
    }

    var prefix = '';
    if (head.value.type !== 'open') {
      while (head) {
        var _head$value = head.value,
            type = _head$value.type,
            content = _head$value.content;

        if ('text' === type) {
          prefix += content;
        } else {
          break;
        }
        head = head.next;
      }
    }

    head = head && head.next;
    while (head) {
      var _head$value2 = head.value,
          _type = _head$value2.type,
          _content = _head$value2.content;

      if (_type === 'open') {
        var _stripByLinkedNode = stripByLinkedNode(head),
            newString = _stripByLinkedNode.string,
            _endNode = _stripByLinkedNode.endNode;

        string += newString;
        head = _endNode;
        continue;
      } else if ('text' === _type) {
        string += _content;
      } else {
        // close
        string = stripWrappedString(string, { level: level + 1, transform: transform, openStr: openStr, closeStr: closeStr });
        if (typeof transform === 'function') {
          string = transform(string, { level: level, openStr: openStr, closeStr: closeStr });
        }
        return {
          endNode: head.next,
          string: prefix + string
        };
      }

      head = head.next;
    }

    return {
      string: prefix + string,
      endNode: head
    };
  };

  var stripByLinkedNodeAll = function stripByLinkedNodeAll(head) {
    var _stripByLinkedNode2 = stripByLinkedNode(head),
        string = _stripByLinkedNode2.string,
        endNode = _stripByLinkedNode2.endNode;

    var suffix = '';
    head = endNode;
    while (head) {
      var _head$value3 = head.value,
          type = _head$value3.type,
          content = _head$value3.content;

      if ('text' === type) {
        suffix += content;
      } else {
        var _stripByLinkedNode3 = stripByLinkedNode(head),
            newString = _stripByLinkedNode3.string,
            _endNode2 = _stripByLinkedNode3.endNode;

        suffix += newString;
        head = _endNode2;
        continue;
      }
      head = head.next;
    }

    return string + suffix;
  };

  return stripByLinkedNodeAll(linked.head);
}

function mergeWrappedStringLinked(wrappedString) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      transform = _ref4.transform,
      allowEmptyContent = _ref4.allowEmptyContent,
      _ref4$openStr = _ref4.openStr,
      openStr = _ref4$openStr === undefined ? OPEN_STR : _ref4$openStr,
      _ref4$closeStr = _ref4.closeStr,
      closeStr = _ref4$closeStr === undefined ? CLOSE_STR : _ref4$closeStr;

  var linked = parseWrappedStringLinkedList(wrappedString, {
    openStr: openStr,
    closeStr: closeStr,
    allowEmptyContent: allowEmptyContent
  });

  var openStack = [];
  var head = linked.head;
  while (head) {
    var type = head.value.type;

    if (type === 'open') {
      openStack.push(head);
    } else if (type === 'close') {
      var openNode = openStack.pop();
      var newHead = head.next;
      linked.removeNode(openNode);
      linked.removeNode(head);
      head = newHead;

      if (head.prev) {
        var content = transform ? transform(head.prev.value.content) : head.prev.value.content;
        // if (content === '') {
        // linked.removeNode(head.prev)
        // }
        // else {
        head.prev.value.type = 'chunk-text';
        head.prev.value.content = content;
        // }
      }
      continue;
    } else {}

    head = head.next;
  }

  return linked;
}