'use strict';

exports.__esModule = true;
exports.encode = encode;
exports.decode = decode;
var CODE_GAP = 9;
var MIN_NUM_CODE = '0'.charCodeAt(0);
var MAX_NUM_CODE = '0'.charCodeAt(0) + CODE_GAP;
var MIN_LETTER_CODE = 'a'.charCodeAt(0);

var TABLE = ['\u200C', '\u200B', '\u200D', '\u2060', '\u2061', '\u2062', '\u2063', '\u2064', '\u2065', '\u2066', '\u2067', '\u2068', '\u2069'];
// const TABLE = ['1', '2', '3', '4', '5']
var SEP_CHAR = '\u200E';
// const SEP_CHAR = '*'

var charEncode = exports.charEncode = function charEncode(ch, table) {
  var code = ch.charCodeAt(0);
  if (code >= MIN_NUM_CODE && code <= MAX_NUM_CODE) {
    return table[code - MIN_NUM_CODE];
  }
  return table[CODE_GAP + 1 + code - MIN_LETTER_CODE];
};

function encode(string) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$sepChar = _ref.sepChar,
      sepChar = _ref$sepChar === undefined ? SEP_CHAR : _ref$sepChar,
      _ref$table = _ref.table,
      table = _ref$table === undefined ? TABLE : _ref$table;

  var encodedArray = [];
  for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref2 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref2 = _i.value;
    }

    var s = _ref2;

    // UTF-16代码
    var chunk = '';
    for (var _iterator2 = s.codePointAt(0).toString(table.length), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref3 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref3 = _i2.value;
      }

      var char = _ref3;

      chunk += charEncode(char, table);
    }
    encodedArray.push(chunk);
  }
  return encodedArray.join(sepChar);
}

function decode(encoded) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$sepChar = _ref4.sepChar,
      sepChar = _ref4$sepChar === undefined ? SEP_CHAR : _ref4$sepChar,
      _ref4$table = _ref4.table,
      table = _ref4$table === undefined ? TABLE : _ref4$table;

  var points = [];
  for (var _iterator3 = encoded.split(sepChar), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
    var _ref5;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref5 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref5 = _i3.value;
    }

    var chunk = _ref5;

    var code = 0;
    var unit = Math.pow(table.length, chunk.length - 1);
    for (var _iterator4 = chunk, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref6 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref6 = _i4.value;
      }

      var char = _ref6;

      var bitCode = table.indexOf(char);
      if (bitCode >= 0) {
        code += bitCode * unit;
      } else {
        code += char.codePointAt(0) * unit;
      }
      unit /= table.length;
    }
    chunk.length && points.push(code);
  }
  return String.fromCodePoint.apply(String, points);
}