'use strict';

exports.__esModule = true;
exports.getDOMListFromID = getDOMListFromID;
exports.highlightActiveBadge = highlightActiveBadge;
exports.unHighlightActiveBadge = unHighlightActiveBadge;
exports.updateDOMAttr = updateDOMAttr;

var _stringUtils = require('./string-utils');

var _ghostString = require('./ghost-string');

var _createI18nWrapper = require('./createI18nWrapper');

/**
 * @file: dom-utils
 * @author: Cuttle Cong
 * @date: 2017/12/20
 * @description:
 */
function getDOMListFromID(id) {
  return [].slice.call(document.querySelectorAll('*[data-i18n-react-live*=' + JSON.stringify(JSON.stringify(id)) + ']'));
}

function highlightActiveBadge(id) {
  var list = getDOMListFromID(id);
  list.forEach(function (ele) {
    ele.classList.add('i18n-active');
  });
}

function unHighlightActiveBadge() {
  var list = [].slice.call(document.querySelectorAll('*[data-i18n-react-live].i18n-active'));
  list.forEach(function (ele) {
    ele.classList.remove('i18n-active');
  });
}

function replace(encodedValue, key, newValue) {
  var stringData = (0, _stringUtils.stripWrappedString)(encodedValue, {
    transform: function transform(chunk, _ref) {
      var openStr = _ref.openStr,
          closeStr = _ref.closeStr;

      var pos = chunk.split('').lastIndexOf(_createI18nWrapper.RAW_DATA_SEP);
      if (pos >= 0) {
        var _JSON$parse = JSON.parse((0, _ghostString.decode)(chunk.slice(pos + 1))),
            keyName = _JSON$parse[0],
            argvs = _JSON$parse[1];

        if (keyName === key) {
          return newValue.encodedValue;
        }

        return '' + openStr + chunk + closeStr;
      }
      return '' + openStr + chunk + closeStr;
    }
  });

  return {
    encodedValue: stringData,
    stripedValue: (0, _createI18nWrapper.parseTranslatedString)(stringData, { data: false }).rawContent
  };
}

function updateDOMAttr(el, id, newVal) {
  var list = getDOMListFromID(id);

  list.forEach(function (ele) {
    var pathmap = ele.getAttribute('data-i18n-react-live') || '{}';
    try {
      pathmap = JSON.parse(pathmap);
    } catch (e) {
      pathmap = {};
    }

    var paths = pathmap[id];
    if (paths) {
      var newPaths = paths.map(function (_ref2) {
        var path = _ref2[0],
            stringWithData = _ref2[1];

        if (/^children\[(\d+)]$/.test(path)) {
          var index = parseInt(RegExp.$1);
          var node = ele.childNodes[index];

          var _replace = replace(stringWithData, id, newVal),
              encodedValue = _replace.encodedValue,
              stripedValue = _replace.stripedValue;

          node.textContent = stripedValue;
          return [path, encodedValue];
        } else {
          var _replace2 = replace(stringWithData, id, newVal),
              _encodedValue = _replace2.encodedValue,
              _stripedValue = _replace2.stripedValue;

          ele.setAttribute(path, _stripedValue);
          return [path, _encodedValue];
        }
      });

      pathmap[id] = newPaths;

      ele.setAttribute('data-i18n-react-live', JSON.stringify(pathmap));
    }
  });
}