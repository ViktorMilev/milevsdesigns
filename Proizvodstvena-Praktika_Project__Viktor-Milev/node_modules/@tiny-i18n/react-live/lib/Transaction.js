'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _defaultTinyI18n = require('./defaultTinyI18n');

var _defaultTinyI18n2 = _interopRequireDefault(_defaultTinyI18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file: transaction
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author: Cuttle Cong
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date: 2017/12/20
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Transaction = function (_EventEmitter) {
  _inherits(Transaction, _EventEmitter);

  function Transaction(tinyI18n, config) {
    _classCallCheck(this, Transaction);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.context = { data: { reqs: [] } };
    _this.config = {};

    _this.tinyI18n = tinyI18n || _defaultTinyI18n2.default;
    _this.setConfig(config);
    return _this;
  }

  /**
   *
   * @param config
   * @param config.fetchWord
   * @param config.fetchUpdate
   */
  Transaction.prototype.setConfig = function setConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.config = config || {};
  };

  Transaction.prototype.register = function register(lang) {
    if (this.context.lang !== lang) {
      this.context.lang = lang;
      this.emit('update:lang', lang);
    }
  };

  Transaction.prototype.getLangInfo = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(extra) {
      var req, data;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.config.fetchWord) {
                _context.next = 18;
                break;
              }

              _context.prev = 1;
              req = _extends({ lang: this.context.lang, key: extra.id }, extra);

              delete req.id;
              _context.next = 6;
              return this.config.fetchWord(req);

            case 6:
              data = _context.sent;

              if (!(data === false)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return', this.tinyI18n.getWord(extra.id, this.context.lang));

            case 9:
              this.emit('langInfo', data);
              return _context.abrupt('return', String(data));

            case 13:
              _context.prev = 13;
              _context.t0 = _context['catch'](1);

              _context.t0.id = 'langInfo';
              this.emit('error', _context.t0);

            case 17:
              return _context.abrupt('return', this.tinyI18n.getWord(extra.id, this.context.lang));

            case 18:
              return _context.abrupt('return', this.tinyI18n.getWord(extra.id, this.context.lang));

            case 19:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[1, 13]]);
    }));

    function getLangInfo(_x2) {
      return _ref.apply(this, arguments);
    }

    return getLangInfo;
  }();

  Transaction.prototype.update = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref2) {
      var id = _ref2.id,
          value = _ref2.value,
          _ref2$lang = _ref2.lang,
          lang = _ref2$lang === undefined ? this.context.lang : _ref2$lang;
      var req, data;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              req = { key: id, value: value, lang: lang };

              this.emit('update', req);

              if (!this.config.fetchUpdate) {
                _context2.next = 18;
                break;
              }

              _context2.prev = 3;
              _context2.next = 6;
              return this.config.fetchUpdate(req);

            case 6:
              data = _context2.sent;

              if (!(data === false)) {
                _context2.next = 9;
                break;
              }

              return _context2.abrupt('return', data);

            case 9:
              _context2.next = 16;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2['catch'](3);

              _context2.t0.id = 'update';
              this.emit('error', _context2.t0);
              return _context2.abrupt('return', false);

            case 16:
              _context2.next = 19;
              break;

            case 18:
              this.context.data.reqs.push(req);

            case 19:
              return _context2.abrupt('return', true);

            case 20:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[3, 11]]);
    }));

    function update(_x3) {
      return _ref3.apply(this, arguments);
    }

    return update;
  }();

  return Transaction;
}(_events2.default);

exports.default = Transaction;